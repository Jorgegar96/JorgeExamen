{"version":3,"sources":["logo.svg","components/Navigation.js","components/TodoForms.js","components/InfoCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","href","this","props","title","npedidos","Component","TodoForms","state","codigo","para","descripcion","prioridad","handleInput","bind","handleSubmit","e","target","value","name","setState","console","log","alert","preventDefault","onAddTodo","onSubmit","type","onChange","placeholder","pedidos","App","length","handleAddTodo","removeTodo","index","window","confirm","filter","pedido","i","data","JSON","stringify","localStorage","setItem","map","key","id_prod","onClick","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0hBAAAA,EAAOC,QAAU,IAA0B,kC,8NCkB5BC,G,uLAdX,OACE,yBAAKC,UAAU,8BACb,uBAAGC,KAAK,GAAGD,UAAU,cAClBE,KAAKC,MAAMC,MAEZ,0BAAMJ,UAAU,qCACbE,KAAKC,MAAME,gB,GARCC,c,eCiFVC,E,YAhFb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,OAAQ,GACRC,KAAM,GACNC,YAAa,GACbC,UAAW,eAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,yEAYFE,GAAI,IAAD,EACSA,EAAEC,OAAjBC,EADM,EACNA,MAAOC,EADD,EACCA,KACdjB,KAAKkB,SAAL,eACGD,EAAMD,IAETG,QAAQC,IAAIpB,KAAKM,S,mCAGNQ,GACXO,MAAM,iCACNP,EAAEQ,iBACFtB,KAAKC,MAAMsB,UAAUvB,KAAKM,OAC1Ba,QAAQC,IAAI,yB,+BAIZ,OACE,yBAAKtB,UAAU,YACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,YAAY0B,SAAUxB,KAAKa,cACzC,yBAAKf,UAAU,cACb,2BACE2B,KAAK,OACLR,KAAK,SACLS,SAAU1B,KAAKW,YACfb,UAAU,eACV6B,YAAY,YAGhB,yBAAK7B,UAAU,cACb,2BACE2B,KAAK,OACLR,KAAK,OACLS,SAAU1B,KAAKW,YACfb,UAAU,eACV6B,YAAY,UAGhB,yBAAK7B,UAAU,cACb,2BACE2B,KAAK,OACLR,KAAK,cACLS,SAAU1B,KAAKW,YACfb,UAAU,eACV6B,YAAY,iBAGhB,yBAAK7B,UAAU,cACb,4BACEmB,KAAK,YACLnB,UAAU,eACV4B,SAAU1B,KAAKW,aAEf,+CACA,kDACA,mDAGJ,4BAAQc,KAAK,SAAS3B,UAAU,mBAAhC,iB,GAvEYM,aCCAA,YCIxBe,QAAQC,IAAIQ,K,IAoFGC,E,YAjFb,aAAc,IAAD,8BACX,+CACKvB,MAAQ,CACXJ,MAAO,wBACPC,SAAUyB,IAAQE,OAClBF,aAEF,EAAKG,cAAc,EAAKA,cAAcnB,KAAnB,gBACnB,EAAKoB,WAAW,EAAKA,WAAWpB,KAAhB,gBARL,E,wEAWFqB,GACNC,OAAOC,QAAQ,iCAChBnC,KAAKkB,SAAS,CACZU,QAAS5B,KAAKM,MAAMsB,QAAQQ,OAAO,SAACC,EAAQC,GAC1C,OAAOA,GAAKL,Q,oCAONI,GAEZrC,KAAKkB,SAAS,CACZU,QAAQ,GAAD,mBAAM5B,KAAKM,MAAMsB,SAAjB,CAA0BS,MAEnC,IAAIE,EAAKC,KAAKC,UAAUzC,KAAKM,MAAMsB,SACnCc,aAAaC,QAAQ,OAAOJ,K,+BAGrB,IAAD,OACAX,EAAU5B,KAAKM,MAAMsB,QAAQgB,IAAI,SAACP,EAAOC,GAC7C,OACE,yBAAKxC,UAAU,WAAW+C,IAAKP,GAC7B,yBAAKxC,UAAU,aACb,yBAAKA,UAAU,eACb,4BAAKuC,EAAOS,SACZ,0BAAMhD,UAAU,sCACZuC,EAAO3B,YAGb,2BAAI2B,EAAO5B,aACX,2BAAG,8BAAO4B,EAAO7B,OACjB,yBAAKV,UAAU,eACb,4BACEA,UAAU,iBACViD,QAAS,EAAKf,WAAWpB,KAAK,EAAK0B,IAFrC,kBAUV,OACE,yBAAKxC,UAAU,OAGb,kBAAC,EAAD,CAAYI,MAASF,KAAKM,MAAMJ,MAAQC,SAAWH,KAAKM,MAAMH,WAC9D,yBAAKL,UAAU,sBACb,iDAEF,yBAAKA,UAAU,aACb,yBAAKkD,IAAKC,IAAMnD,UAAU,WAAWoD,IAAI,SACzC,yBAAKpD,UAAU,YAGb,kBAAC,EAAD,CAAWyB,UAAWvB,KAAK+B,gBACzBH,IAGN,4BAAQ9B,UAAU,oB,GAzERM,aCGE+C,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d53ad122.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Navigation extends Component{\r\n  render(){\r\n    return(\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a href=\"\" className=\"text-white\">\r\n          {this.props.title}\r\n\r\n          <span className=\"badge badge-pill badge-light ml-2\">\r\n            {this.props.npedidos}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TodoForms extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      codigo: \"\",\r\n      para: \"\",\r\n      descripcion: \"\",\r\n      prioridad: \"low - $0.00\"\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInput(e) {\r\n    const {value, name} = e.target;\r\n    this.setState({\r\n      [name]:value\r\n    })\r\n    console.log(this.state);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    alert(\"Se agregara un nuevo elemento\");\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    console.log(\"sending the data...\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-4\">\r\n        <div className=\"card mt-4\">\r\n          <form className=\"card-body\" onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"codigo\"\r\n                onChange={this.handleInput}\r\n                className=\"form-control\"\r\n                placeholder=\"Codigo\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"para\"\r\n                onChange={this.handleInput}\r\n                className=\"form-control\"\r\n                placeholder=\"Para\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"descripcion\"\r\n                onChange={this.handleInput}\r\n                className=\"form-control\"\r\n                placeholder=\"Descripcion\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <select\r\n                name=\"prioridad\"\r\n                className=\"form-control\"\r\n                onChange={this.handleInput}\r\n                >\r\n                <option>low - $0.00</option>\r\n                <option>medium - $9.99</option>\r\n                <option>high - $19.99</option>\r\n              </select>\r\n            </div>\r\n            <button type=\"Submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoForms;\r\n","import React, { Component } from \"react\";\r\nimport TodoForms from \"./TodoForms\";\r\n\r\nclass InfoCards extends Component{\r\n  constructor() {\r\n    super();\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n  }\r\n\r\n  removeTodo(index){\r\n    this.props.onRemoveTodo(index);\r\n  }\r\n  render(){\r\n\r\n\r\n    return(\r\n      <div className=\"card mt-4\">\r\n        <div className=\"card-header\">\r\n          <h3>{this.props.title}</h3>\r\n          <span className=\"badge badge-pill badge-danger ml-2\">\r\n            { this.props.priority }\r\n          </span>\r\n        </div>\r\n        <p>{this.props.description}</p>\r\n        <p><mark>{this.props.responsible}</mark></p>\r\n        <div className=\"card-footer\">\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={this.removeTodo.bind(this.props.index)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InfoCards;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigation from \"./components/Navigation\";\nimport { pedidos } from \"./pedidos.json\";\nimport TodoForms from \"./components/TodoForms\";\nimport InfoCards from \"./components/InfoCards\";\nconsole.log(pedidos);\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      title: \"Aplicacion de Pedidos\",\n      npedidos: pedidos.length,\n      pedidos\n    };\n    this.handleAddTodo=this.handleAddTodo.bind(this);\n    this.removeTodo=this.removeTodo.bind(this);\n  }\n\n  removeTodo(index){\n    if(window.confirm(\"El pedido ha sido entregado?\")){\n      this.setState({\n        pedidos: this.state.pedidos.filter((pedido, i)=>{\n          return i != index\n        })\n      })\n    }\n\n  }\n\n  handleAddTodo(pedido){\n\n    this.setState({\n      pedidos: [...this.state.pedidos, pedido]\n    })\n    var data=JSON.stringify(this.state.pedidos);\n    localStorage.setItem('data',data);\n  }\n\n  render(){\n    const pedidos = this.state.pedidos.map((pedido,i) => {\n      return (\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-header\">\n              <h3>{pedido.id_prod}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                { pedido.prioridad }\n              </span>\n            </div>\n            <p>{pedido.descripcion}</p>\n            <p><mark>{pedido.para}</mark></p>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this,i)}\n              >\n                Entregado\n              </button>\n            </div>\n          </div>\n        </div>)\n    })\n    return (\n      <div className=\"App\">\n\n\n        <Navigation title= { this.state.title } npedidos= {this.state.npedidos} />\n        <div className=\"container bg-white\">\n          <h1>Pedidos en Linea</h1>\n        </div>\n        <div className=\"container\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"row mt-4\">\n\n\n            <TodoForms onAddTodo={this.handleAddTodo}/>\n            { pedidos }\n          </div>\n        </div>\n        <header className=\"App-header\">\n\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}